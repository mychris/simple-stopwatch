#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Simple ncurses based terminal stopwatch
#
# Copyright (C) 2013 Christoph Göttschkes
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import argparse
import curses
import os
import signal
import sys
import time

NUMBERS = (
  (
    (1, 1, 1, 1, 1, 1), (1, 1, 0, 0, 1, 1), (1, 1, 0, 0, 1, 1),
    (1, 1, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1)
  ), (
    (0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 1, 1)
  ), (
    (1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0), (1, 1, 1, 1, 1, 1)
  ), (
    (1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1)
  ), (
    (1, 1, 0, 0, 1, 1), (1, 1, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 1, 1)
  ), (
    (1, 1, 1, 1, 1, 1), (1, 1, 0, 0, 0, 0), (1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1)
  ), (
    (1, 1, 1, 1, 1, 1), (1, 1, 0, 0, 0, 0), (1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1)
  ), (
    (1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 1, 1),
  ), (
    (1, 1, 1, 1, 1, 1), (1, 1, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1)
  ), (
    (1, 1, 1, 1, 1, 1), (1, 1, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1)
  ), (
    (0, 0), (1, 1), (0, 0), (1, 1), (0, 0)
  )
)

COLORS = {
  'black': curses.COLOR_BLACK, 'blue': curses.COLOR_BLUE,
  'cyan': curses.COLOR_CYAN, 'green': curses.COLOR_GREEN,
  'magenta': curses.COLOR_MAGENTA, 'red': curses.COLOR_RED,
  'white': curses.COLOR_WHITE, 'yellow': curses.COLOR_YELLOW, 'none': -1
}
 
PAUSE, RUNNING, ARGS = False, True, {}

def render_char(char, stdscr, offset_y, offset_x):
  '''Render one character'''
  global NUMBERS

  char = int(char) if char.isdigit() else 10
  addstr = stdscr.addstr
  curses_color = curses.color_pair(1)
  col, row = 0, 0
  for arr in NUMBERS[char]:
    col = 0
    for b in arr:
      if b:
        addstr(offset_y + row, offset_x + col, '█', curses_color)
      col += 1
    row += 1
  return col

def render(delta, stdscr):
  '''render the stdscr'''
  global ARGS, PAUSE

  hours, minutes, seconds = (delta / 60 / 60), (delta / 60) % 60, (delta) % 60

  if hours < 1 and not ARGS.hours_always:
    output_string = '%02d:%02d' % (minutes, seconds)
  else:
    output_string = '%02d:%02d:%02d' if hours < 10 else '%d:%02d:%02d'
    output_string = output_string % (hours, minutes, seconds)

  height, width = 9, 2
  if ARGS.center:
    width += output_string.count(':') * 2
    width += sum(x.isdigit() for x in output_string) * 6
    width += (len(output_string) + 1) * 2

    start_x = int((stdscr.getmaxyx()[1] - width) / 2)
    start_y = int((stdscr.getmaxyx()[0] - height) / 2)
  else:
    start_x, start_y = 2, 1

  x, y = start_x + 3, start_y + 2
  for char in output_string:
    x += render_char(char, stdscr, y, x) + 2

  x, y, max_x = start_x, start_y, x

  curses_color = curses.color_pair(1)
  stdscr.addstr(y, x, '┏', curses_color)
  stdscr.addstr(y + height - 1, x, '┗', curses_color)
  stdscr.addstr(y, max_x, '┓', curses_color)
  stdscr.addstr(y + height - 1, max_x, '┛', curses_color)
  for i in range(x + 1, max_x):
    stdscr.addstr(y, i, '━', curses_color)
    stdscr.addstr(y + height - 1, i, '━', curses_color)
  for i in range(y + 1, y + height - 1):
    stdscr.addstr(i, x, '┃', curses_color)
    stdscr.addstr(i, max_x, '┃', curses_color)

  title = " Stopwatch "
  title_x = int((max_x + x - len(title)) / 2)
  stdscr.addstr(y, title_x, title, curses_color)

  if PAUSE:
    paused = " PAUSE "
    paused_x = int((max_x + x - len(paused)) / 2)
    stdscr.addstr(y + 8, paused_x, paused, curses_color)

def main(stdscr):
  '''main for curses.wrapper()'''
  global ARGS, PAUSE, COLORS

  curses.noecho()
  curses.cbreak()
  curses.curs_set(0)
  curses.start_color()
  curses.use_default_colors()

  stdscr.keypad(1)
  stdscr.nodelay(1)

  curses.init_pair(1, COLORS[ARGS.color], -1)

  start, pause_begin, pause_delta = time.time(), time.time(), 0
  while RUNNING:
    c = stdscr.getch()
    if c == ord('q') or c == ord('Q'):
      return False
    if c == ord(' '):
      if not PAUSE:
        PAUSE, pause_begin = True, time.time()
      else:
        PAUSE = False
        pause_delta += time.time() - pause_begin

    if PAUSE:
      delta = max(pause_begin - start - pause_delta, 0)
    else:
      delta = max(time.time() - start - pause_delta, 0)

    delta = ARGS.start - delta if ARGS.countdown else ARGS.start + delta

    if ARGS.countdown and delta <= 0:
      if ARGS.auto_exit:
        return True
      delta = 0
      curses.init_pair(1, COLORS[ARGS.color_zero], -1)

    stdscr.erase()
    try:
      render(delta, stdscr)
    except curses.error:
      pass
    stdscr.refresh()
    time.sleep(0.1)

  return False

def sig_handler(sig, frame):
  global RUNNING
  RUNNING = False

if __name__ == '__main__':
  parser = argparse.ArgumentParser(
      description="""Simple ncurses based terminal stopwatch.
Press space to pause and q to exit.""",
      prog=os.path.basename(sys.argv[0]), add_help=False)

  parser.add_argument('--hours-always', dest='hours_always', action='store_true',
      default=False, help='display hours always')

  parser.add_argument('--color', choices=sorted(COLORS.keys()), default='blue',
      dest='color', help='the color to use')

  parser.add_argument('--center', dest='center', action='store_true',
      default=False, help='center stopwatch')

  parser.add_argument('--start-at', dest='start', default=0, metavar='TIME',
      help='start with specified time defined in hh:mm:ss format')

  parser.add_argument('--countdown', dest='countdown', action='store_true',
      default=False, help='use stopwatch as countdown timer')

  parser.add_argument('--auto-exit', dest='auto_exit', action='store_true',
      default=False, help='auto exit if countdown reaches zero')

  parser.add_argument('--color-zero', choices=sorted(COLORS.keys()),
      default='red', dest='color_zero',
      help='the color to use if countdown reaches zero')

  parser.add_argument('--help', action='help',
      help='show this help message and exit')

  parser.add_argument('--version', action='version',
      version='%(prog)s 1.0.0')

  ARGS = parser.parse_args()

  if sys.version_info < (3, ):
    import locale
    locale.setlocale(locale.LC_ALL, '')
    range = xrange

  try:
    ARGS.start = int(ARGS.start)
  except ValueError:
    ARGS.start = ARGS.start.split(':')
    if len(ARGS.start) > 3 or any(not x.isdigit() for x in ARGS.start):
      sys.stdout.write("Invalid --start-at format\n")
      sys.exit(1)

    ARGS.start = ['00', '00', '00'] + ARGS.start
    ARGS.start = int(ARGS.start[-1]) + (int(ARGS.start[-2]) * 60) + \
        (int(ARGS.start[-3]) * 60 * 60)

  for sig in (signal.SIGABRT, signal.SIGILL, signal.SIGINT, signal.SIGSEGV, signal.SIGTERM):
    signal.signal(sig, sig_handler)

  if curses.wrapper(main):
    sys.stdout.write("Countdown finished...\n")
    sys.stdout.flush()

# vim: ft=python ts=2 sts=2 sw=2 et:
