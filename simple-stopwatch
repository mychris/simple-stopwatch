#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Simple ncurses based terminal stopwatch
#
# Copyright (C) 2013 Christoph Göttschkes
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import argparse
import curses
import sys
import time

__version__ = '1.0.0'

NUMBERS = [
  [
    [1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1],
    [1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1]
  ], [
    [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1]
  ], [
    [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1],
    [1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]
  ], [
    [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1]
  ], [
    [1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1]
  ], [
    [1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1]
  ], [
    [1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1],
    [1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1]
  ], [
    [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1],
  ], [
    [1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1],
    [1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1]
  ], [
    [1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1]
  ]
]

HOURS_ALWAYS, COLOR, PAUSE, CENTER = False, 'blue', False, False

def render_char(char, stdsrc, offset_y, offset_x):
  '''Render one character'''
  global NUMBERS

  if char == ':':
    stdsrc.addstr(offset_y + 1, offset_x, '█', curses.color_pair(1))
    stdsrc.addstr(offset_y + 1, offset_x + 1, '█', curses.color_pair(1))
    stdsrc.addstr(offset_y + 3, offset_x, '█', curses.color_pair(1))
    stdsrc.addstr(offset_y + 3, offset_x + 1, '█', curses.color_pair(1))
    return 2

  col, row = 0, 0
  for arr in NUMBERS[int(char)]:
    col = 0
    for b in arr:
      if b:
        stdsrc.addstr(offset_y + row, offset_x + col, '█', curses.color_pair(1))
      col += 1
    row += 1
  return 6

def render(delta, stdsrc):
  '''render the stdsrc'''
  global HOURS_ALWAYS, CENTER

  hours, minutes, seconds = (delta / 60 / 60), (delta / 60) % 60, (delta) % 60

  if hours < 1 and not HOURS_ALWAYS:
    output_string = ('%02d:%02d' % (minutes, seconds))
  else:
    if hours < 10:
      output_string = ('%02d:%02d:%02d' % (hours, minutes, seconds))
    else:
      output_string = ('%d:%02d:%02d' % (hours, minutes, seconds))

  if CENTER:
    height, width = 9, 2
    width += len([x for x in output_string if x == ':']) * 2
    width += len([x for x in output_string if x.isdigit()]) * 6
    width += (len(output_string) + 1) * 2

    start_x = int((stdsrc.getmaxyx()[1] - width) / 2)
    start_y = int((stdsrc.getmaxyx()[0] - height) / 2)
  else:
    start_x, start_y = 2, 1

  x, y = start_x + 3, start_y + 2
  for char in output_string:
    x += render_char(char, stdsrc, y, x) + 2

  x, y, max_x = start_x, start_y, x

  stdsrc.addstr(y, x, '┏', curses.color_pair(1))
  stdsrc.addstr(y + 8, x, '┗', curses.color_pair(1))
  stdsrc.addstr(y, max_x, '┓', curses.color_pair(1))
  stdsrc.addstr(y + 8, max_x, '┛', curses.color_pair(1))
  for i in range(x + 1, max_x):
    stdsrc.addstr(y, i, '━', curses.color_pair(1))
    stdsrc.addstr(y + 8, i, '━', curses.color_pair(1))
  for i in range(y + 1, y + 8):
    stdsrc.addstr(i, x, '┃', curses.color_pair(1))
    stdsrc.addstr(i, max_x, '┃', curses.color_pair(1))

  title = " Stopwatch "
  title_x = int((max_x + x - len(title)) / 2)
  stdsrc.addstr(y, title_x, title, curses.color_pair(1))

  if PAUSE:
    paused = " PAUSE "
    paused_x = int((max_x + x - len(paused)) / 2)
    stdsrc.addstr(y + 8, paused_x, paused, curses.color_pair(1))

def main(stdsrc):
  '''main for curses.wrapper()'''
  global COLOR, PAUSE

  curses.noecho()
  curses.cbreak()
  curses.curs_set(0)
  curses.start_color()
  curses.use_default_colors()

  stdsrc.keypad(1)
  stdsrc.nodelay(1)

  colors = {'black': curses.COLOR_BLACK, 'blue': curses.COLOR_BLUE,
      'cyan': curses.COLOR_CYAN, 'green': curses.COLOR_GREEN,
      'magenta': curses.COLOR_MAGENTA, 'red': curses.COLOR_RED,
      'white': curses.COLOR_WHITE, 'yellow': curses.COLOR_YELLOW,
      'none': -1}
  curses.init_pair(1, colors[COLOR], -1)

  start, pause_begin, pause_delta = time.time(), None, 0
  while True:
    c = stdsrc.getch()
    if c == ord('q') or c == ord('Q'):
      return
    if c == ord(' '):
      if not PAUSE:
        PAUSE, pause_begin = True, time.time()
      else:
        PAUSE = False
        pause_delta += time.time() - pause_begin

    stdsrc.erase()
    try:
      if PAUSE:
        delta = max(pause_begin - start - pause_delta, 0)
      else:
        delta = max(time.time() - start - pause_delta, 0)
      render(delta, stdsrc)
    except curses.error:
      pass
    stdsrc.refresh()
    time.sleep(0.1)

if __name__ == '__main__':
  parser = argparse.ArgumentParser(
      description="""Simple ncurses based terminal stopwatch.
Press space to pause and q to exit.""",
      prog='simple-stopwatch', add_help=False)

  parser.add_argument('--hours-always', dest='hours_always', action='store_true',
      default=False, help='display hours always')

  parser.add_argument('--color', choices=['black', 'blue', 'cyan', 'green',
      'magenta', 'red', 'white', 'yellow', 'none'], default='blue',
      dest='color', help='the color to use')

  parser.add_argument('--center', dest='center', action='store_true',
      default=False, help='center stopwatch')

  parser.add_argument('--help', action='help',
      help='show this help message and exit')

  parser.add_argument('--version', action='version',
      version='%(prog)s ' + __version__)

  args = parser.parse_args()

  HOURS_ALWAYS, COLOR, CENTER = args.hours_always, args.color, args.center
  try:
    curses.wrapper(main)
  except KeyboardInterrupt:
    pass

# vim: ft=python ts=2 sts=2 sw=2 et:
